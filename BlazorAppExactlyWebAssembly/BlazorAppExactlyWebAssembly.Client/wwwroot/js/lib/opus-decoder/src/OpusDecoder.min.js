/**
 * Minified by jsDelivr using Terser v5.39.0.
 * Original file: /npm/opus-decoder@0.7.10/src/OpusDecoder.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{WASMAudioDecoderCommon}from"@wasm-audio-decoders/common";import EmscriptenWASM from"./EmscriptenWasm.js";export default function OpusDecoder(e={}){OpusDecoder.errors||Object.defineProperties(OpusDecoder,{errors:{value:new Map([[-1,"OPUS_BAD_ARG: One or more invalid/out of range arguments"],[-2,"OPUS_BUFFER_TOO_SMALL: Not enough bytes allocated in the buffer"],[-3,"OPUS_INTERNAL_ERROR: An internal error was detected"],[-4,"OPUS_INVALID_PACKET: The compressed data passed is corrupted"],[-5,"OPUS_UNIMPLEMENTED: Invalid/unsupported request number"],[-6,"OPUS_INVALID_STATE: An encoder or decoder structure is invalid or already freed"],[-7,"OPUS_ALLOC_FAIL: Memory allocation has failed"]])}}),this._init=()=>new this._WASMAudioDecoderCommon(this).instantiate(this._EmscriptenWASM,this._module).then((e=>{this._common=e,this._inputBytes=0,this._outputSamples=0,this._frameNumber=0,this._input=this._common.allocateTypedArray(this._inputSize,Uint8Array),this._output=this._common.allocateTypedArray(this._outputChannels*this._outputChannelSize,Float32Array);const t=this._common.allocateTypedArray(this._channels,Uint8Array);t.buf.set(this._channelMappingTable),this._decoder=this._common.wasm.opus_frame_decoder_create(this._sampleRate,this._channels,this._streamCount,this._coupledStreamCount,t.ptr,this._preSkip,this._forceStereo)})),Object.defineProperty(this,"ready",{enumerable:!0,get:()=>this._ready}),this.reset=()=>(this.free(),this._init()),this.free=()=>{this._common.free(),this._common.wasm.opus_frame_decoder_destroy(this._decoder),this._common.wasm.free(this._decoder)},this._decode=e=>{if(!(e instanceof Uint8Array))throw Error("Data to decode must be Uint8Array. Instead got "+typeof e);this._input.buf.set(e);let t,s=this._common.wasm.opus_frame_decode_float_deinterleaved(this._decoder,this._input.ptr,e.length,this._output.ptr);return s<0&&(t="libopus "+s+" "+(OpusDecoder.errors.get(s)||"Unknown Error"),console.error(t),s=0),{outputBuffer:this._common.getOutputChannels(this._output.buf,this._outputChannels,s),samplesDecoded:s,error:t}},this.decodeFrame=e=>{let t=[];const s=this._decode(e);return s.error&&this._common.addError(t,s.error,e.length,this._frameNumber,this._inputBytes,this._outputSamples),this._frameNumber++,this._inputBytes+=e.length,this._outputSamples+=s.samplesDecoded,this._WASMAudioDecoderCommon.getDecodedAudioMultiChannel(t,[s.outputBuffer],this._outputChannels,s.samplesDecoded,this._sampleRate)},this.decodeFrames=e=>{let t=[],s=[],o=0,r=0;for(;r<e.length;){const i=e[r++],n=this._decode(i);t.push(n.outputBuffer),o+=n.samplesDecoded,n.error&&this._common.addError(s,n.error,i.length,this._frameNumber,this._inputBytes,this._outputSamples),this._frameNumber++,this._inputBytes+=i.length,this._outputSamples+=n.samplesDecoded}return this._WASMAudioDecoderCommon.getDecodedAudioMultiChannel(s,t,this._outputChannels,o,this._sampleRate)},this._isWebWorker=OpusDecoder.isWebWorker,this._WASMAudioDecoderCommon=OpusDecoder.WASMAudioDecoderCommon||WASMAudioDecoderCommon,this._EmscriptenWASM=OpusDecoder.EmscriptenWASM||EmscriptenWASM,this._module=OpusDecoder.module;const t=e=>"number"==typeof e,s=e.sampleRate,o=e.channels,r=e.streamCount,i=e.coupledStreamCount,n=e.channelMappingTable,h=e.preSkip,a=e.forceStereo?1:0;if(o>2&&(!t(r)||!t(i)||!Array.isArray(n)))throw new Error("Invalid Opus Decoder Options for multichannel decoding.");return this._sampleRate=[8e3,12e3,16e3,24e3,48e3].includes(s)?s:48e3,this._channels=t(o)?o:2,this._streamCount=t(r)?r:1,this._coupledStreamCount=t(i)?i:this._channels-1,this._channelMappingTable=n||(2===this._channels?[0,1]:[0]),this._preSkip=h||0,this._forceStereo=o<=8&&2!=o?a:0,this._inputSize=3840*this._channels,this._outputChannelSize=5760,this._outputChannels=this._forceStereo?2:this._channels,this._ready=this._init(),this}
//# sourceMappingURL=/sm/58f69b031e792e8a5202afa0dad5d80ce3520f8bce3a304de1e96386350ca781.map