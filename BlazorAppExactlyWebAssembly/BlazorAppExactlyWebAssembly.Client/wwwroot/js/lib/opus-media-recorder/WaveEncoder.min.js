/**
 * Minified by jsDelivr using Terser v5.17.1.
 * Original file: /npm/opus-media-recorder@0.8.0/WaveEncoder.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
const{writeString:writeString}=require("./commonFunctions.js"),BYTES_PER_SAMPLE=Int16Array.BYTES_PER_ELEMENT;class WaveEncoder{constructor(e,n,t){this.config={inputSampleRate:e,channelCount:n},this.encodedBuffers=[]}encode(e){const n=e[0].length,t=new ArrayBuffer(n*BYTES_PER_SAMPLE*this.config.channelCount),i=new DataView(t);for(let t=0;t<this.config.channelCount;t++){let o=e[t];for(let e=0;e<n;e++){let n=32767*o[e]|0;n>32767?n=32767:n<-32768&&(n=-32768);const r=(e*this.config.channelCount+t)*BYTES_PER_SAMPLE;i.setInt16(r,0|n,!0)}}this.encodedBuffers.push(t)}getHeader(){let e=this.encodedBuffers.reduce(((e,n)=>e+n.byteLength),0),n=new ArrayBuffer(44),t=new DataView(n);return writeString(t,0,"RIFF"),t.setUint32(4,36+e,!0),writeString(t,8,"WAVE"),writeString(t,12,"fmt "),t.setUint32(16,16,!0),t.setUint16(20,1,!0),t.setUint16(22,this.config.channelCount,!0),t.setUint32(24,this.config.inputSampleRate,!0),t.setUint32(28,this.config.inputSampleRate*BYTES_PER_SAMPLE*this.config.channelCount,!0),t.setUint16(32,BYTES_PER_SAMPLE*this.config.channelCount,!0),t.setUint16(34,8*BYTES_PER_SAMPLE,!0),writeString(t,36,"data"),t.setUint32(40,e,!0),n}}function emscriptenModuleEmulator(e){return new Promise((function(n,t){(e=void 0!==e&&e||{}).init=function(n,t,i){e.encoder=new WaveEncoder(n,t,i)},e.encode=function(n){e.encoder.encode(n)},e.flush=function(){return[e.encoder.getHeader(),...e.encoder.encodedBuffers.splice(0,e.encoder.encodedBuffers.length)]},e.close=function(){},n(e)}))}module.exports=emscriptenModuleEmulator;
//# sourceMappingURL=/sm/000f5c042622f4befd687860fab74fd3f17300714a53514722046d28e89d7358.map