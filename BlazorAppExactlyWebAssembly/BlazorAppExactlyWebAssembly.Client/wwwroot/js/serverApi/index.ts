/* THIS (.ts) FILE IS GENERATED BY TypedSignalR.Client.TypeScript */
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import type { HubConnection, IStreamResult, Subject } from '@microsoft/signalr';
import type { IAudioHub } from './SoundBlazorApp.SignalRHub';


// components

export type Disposable = {
    dispose(): void;
}

export type HubProxyFactory<T> = {
    createHubProxy(connection: HubConnection): T;
}

export type ReceiverRegister<T> = {
    register(connection: HubConnection, receiver: T): Disposable;
}

type ReceiverMethod = {
    methodName: string,
    method: (...args: any[]) => void
}

class ReceiverMethodSubscription implements Disposable {

    public constructor(
        private connection: HubConnection,
        private receiverMethod: ReceiverMethod[]) {
    }

    public readonly dispose = () => {
        for (const it of this.receiverMethod) {
            this.connection.off(it.methodName, it.method);
        }
    }
}

// API

export type HubProxyFactoryProvider = {
    (hubType: "IAudioHub"): HubProxyFactory<IAudioHub>;
}

export const getHubProxyFactory = ((hubType: string) => {
    if(hubType === "IAudioHub") {
        return IAudioHub_HubProxyFactory.Instance;
    }
}) as HubProxyFactoryProvider;

export type ReceiverRegisterProvider = {
}

export const getReceiverRegister = ((receiverType: string) => {
}) as ReceiverRegisterProvider;

// HubProxy

class IAudioHub_HubProxyFactory implements HubProxyFactory<IAudioHub> {
    public static Instance = new IAudioHub_HubProxyFactory();

    private constructor() {
    }

    public readonly createHubProxy = (connection: HubConnection): IAudioHub => {
        return new IAudioHub_HubProxy(connection);
    }
}

class IAudioHub_HubProxy implements IAudioHub {

    public constructor(private connection: HubConnection) {
    }

    public readonly uploadAudioStream = async (stream: Subject<number>): Promise<void> => {
        return await this.connection.send("UploadAudioStream", stream);
    }

    public readonly getHelloWorld = async (): Promise<string> => {
        return await this.connection.invoke("GetHelloWorld");
    }
}


// Receiver

